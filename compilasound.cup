package fr.uha.ensisa.compil.sound;

import fr.uha.ensisa.compil.sound.api.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;

parser code {:
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append(info.toString());
        m.append(" : " + message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
	
	private SoundFactory soundFactory = new SoundFactory();
	private SoundPlayer soundPlayer = new SoundPlayer();
	private Map<String, AbstractSound> variables = new HashMap<String, AbstractSound> ();
	
	public void setValue (String name, AbstractSound value) {
		variables.put(name, value);
	}
	
	public AbstractSound getValue (String name) {
		AbstractSound value = null;
		if (variables.containsKey(name))
			value = variables.get(name);
		return value;
	}
	
	public void print(String s) {
		//System.out.println(s);
	}
	
:}

terminal TERM;
terminal EQUAL;
terminal LOAD, IMPORT, PLAY;
terminal PLAY_SIMULT;
terminal WITH_NOTES;
terminal SEQUENCE;
terminal REPEAT, TIMES;
terminal END;
terminal Integer NUMBER;
terminal String STRING;
terminal String NOTE;
terminal String VARIABLE;

nonterminal Instructions;
nonterminal Instruction;
nonterminal List<AbstractSound> SoundList;
nonterminal List<String> NoteList;
nonterminal AbstractSound Expr;
nonterminal Integer Int;
nonterminal String Str;
nonterminal String Note;

Instructions::=
			|	Instructions Instruction:inst TERM	{: print("list instructions"); :}
			;
			
Instruction ::=	
			|	PLAY Expr:e							{: print("play"); soundPlayer.playSound(e); :}
			|	PLAY_SIMULT SoundList:l END			{: print("play_simult"); soundPlayer.playSoundSimult(l); :}
			|	VARIABLE:n EQUAL Expr:v				{: print("affectation"); setValue(n, v); :}
			;
			
SoundList	::=										{: print("create list sound"); RESULT = soundFactory.createListSounds(); :}
			|	SoundList:l Expr:e TERM				{: print("list sound add elements"); RESULT = l; if (e != null) l.add(e); :}
			;
			
NoteList	::=										{: print("create list string"); RESULT = soundFactory.createListNotes(); :}
			|	NoteList:l Note:n TERM				{: print("list string add elements"); RESULT = l; if (n != null) l.add(n); :}
			;
			
Expr        ::= LOAD Str:s WITH_NOTES NoteList:l END{: print("load"); RESULT = soundFactory.createSoundMidi(s, l); :}
			|	IMPORT Str:s						{: print("import"); RESULT = soundFactory.createSoundFile(s); :}
			|	REPEAT Int:c TIMES SoundList:l END	{: print("repeat"); RESULT = soundFactory.createSoundLoop(c, l); :}
			|	SEQUENCE SoundList:l END			{: print("sequence"); RESULT = soundFactory.createSoundSequence(l); :}
			|	VARIABLE:n							{: print("variable"); RESULT = getValue(n); :}
			;
			
Int			::=	NUMBER:n							{: print("number"); RESULT = n; :}
			;
			
Str			::=	STRING:s							{: print("string"); RESULT = s; :}
			;
			
Note		::=	NOTE:n								{: print("note"); RESULT = n; :}
			;